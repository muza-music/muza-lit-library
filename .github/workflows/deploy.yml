name: Build and Deploy Frontend

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: muza/frontend
  CONTAINER_NAME: frontend

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    # Set environment based on branch or manual input
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || 'staging')) }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Generate image tag using GitHub SHA only
          IMAGE_TAG="${{ github.sha }}"
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPO="${{ env.ECR_REPOSITORY }}"

          IMAGE_SHA="$ECR_REGISTRY/$REPO:$IMAGE_TAG"
          IMAGE_LATEST="$ECR_REGISTRY/$REPO:latest"

          echo "🏗️ Building image: $IMAGE_SHA (also tagging latest)"
          # Build the Docker image with both tags
          docker build -t "$IMAGE_SHA" -t "$IMAGE_LATEST" .

          # Push both images
          echo "Pushing: $IMAGE_SHA"
          docker push "$IMAGE_SHA"
          echo "Pushing: $IMAGE_LATEST"
          docker push "$IMAGE_LATEST"

          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "image_latest=$IMAGE_LATEST" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current task definition
        run: >
          aws ecs describe-task-definition
          --task-definition "${{ vars.ECS_SERVICE_FRONTEND }}" --region "${{ vars.AWS_REGION }}" --query 'taskDefinition'
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image_sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE_FRONTEND }}
          cluster: ${{ vars.ECS_CLUSTER }}

      - name: Output deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || 'staging')) }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster:** \`${{ vars.ECS_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${{ steps.build-image.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎨 Frontend Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** \`${{ vars.ECS_SERVICE_FRONTEND }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** 3000 (via ALB)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Service deployed successfully" >> $GITHUB_STEP_SUMMARY
